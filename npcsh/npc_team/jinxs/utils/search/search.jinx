jinx_name: "search"
description: "Execute web search or memory/KG search. Usage: /search [-m/-mem | -kg] <query>"
inputs:
  - query: ""
  - search_type: "web"
  - sprovider: ""
  - history_db_path: "~/npcsh_history.db"
steps:
  - name: "execute_search"
    engine: "python"
    code: |
      import os
      import sys
      from npcpy.memory.command_history import (
          CommandHistory, 
          load_kg_from_db
      )
      from npcsh._state import get_relevant_memories

      query = context.get('query')
      search_type = context.get('search_type')
      search_provider = context.get('sprovider')
      history_db_path = context.get('history_db_path')
      output_messages = context.get('messages', [])
      current_npc = context.get('npc')
      current_team = context.get('team')
      
      if not query or not query.strip():
          context['output'] = (
              "Usage:\n"
              "  /search <query>              - Web search\n"
              "  /search -m <query>           - Memory search\n"
              "  /search -kg <query>          - Knowledge graph search"
          )
          context['messages'] = output_messages
          exit()

      def search_memories(query_str, current_context, output_msgs):
          command_history = current_context.get('command_history')
          if not command_history:
              db_path = os.path.expanduser(
                  current_context.get(
                      "history_db_path", 
                      "~/npcsh_history.db"
                  )
              )
              try:
                  command_history = CommandHistory(db_path)
                  current_context['command_history'] = command_history
              except Exception as e:
                  return {
                      "output": f"Error connecting to history: {e}", 
                      "messages": output_msgs
                  }
          
          npc_name = current_context.get('npc_name', '__none__')
          team_name = current_context.get('team_name', '__none__')
          current_path = current_context.get(
              'current_path', 
              os.getcwd()
          )
          state = current_context.get('state')
          
          try:
              memories = get_relevant_memories(
                  command_history=command_history,
                  npc_name=npc_name,
                  team_name=team_name,
                  path=current_path,
                  query=query_str,
                  max_memories=10,
                  state=state
              )
              
              if not memories:
                  output = f"No memories found for query: '{query_str}'"
              else:
                  output = f"Found {len(memories)} memories:\n\n"
                  for i, mem in enumerate(memories, 1):
                      final_mem = (
                          mem.get('final_memory') or 
                          mem.get('initial_memory')
                      )
                      timestamp = mem.get('timestamp', 'unknown')
                      output += f"{i}. [{timestamp}] {final_mem}\n"
              
              return {"output": output, "messages": output_msgs}
              
          except Exception as e:
              return {
                  "output": f"Error searching memories: {e}", 
                  "messages": output_msgs
              }

      def search_knowledge_graph(query_str, current_context, output_msgs):
          command_history = current_context.get('command_history')
          if not command_history:
              db_path = os.path.expanduser(
                  current_context.get(
                      "history_db_path", 
                      "~/npcsh_history.db"
                  )
              )
              try:
                  command_history = CommandHistory(db_path)
                  current_context['command_history'] = command_history
              except Exception as e:
                  return {
                      "output": f"Error connecting to history: {e}", 
                      "messages": output_msgs
                  }
          
          npc_name = current_context.get('npc_name', '__none__')
          team_name = current_context.get('team_name', '__none__')
          current_path = current_context.get(
              'current_path', 
              os.getcwd()
          )
          
          try:
              engine = command_history.engine
              kg = load_kg_from_db(
                  engine, 
                  team_name, 
                  npc_name, 
                  current_path
              )
              
              if not kg or not kg.get('facts'):
                  return {
                      "output": (
                          f"No knowledge graph found for current scope.\n"
                          f"Scope: Team='{team_name}', "
                          f"NPC='{npc_name}', Path='{current_path}'"
                      ),
                      "messages": output_msgs
                  }
              
              query_lower = query_str.lower()
              matching_facts = []
              matching_concepts = []
              
              for fact in kg.get('facts', []):
                  statement = fact.get('statement', '').lower()
                  if query_lower in statement:
                      matching_facts.append(fact)
              
              for concept in kg.get('concepts', []):
                  name = concept.get('name', '').lower()
                  desc = concept.get('description', '').lower()
                  if query_lower in name or query_lower in desc:
                      matching_concepts.append(concept)
              
              output = (
                  f"Knowledge Graph Search Results for '{query_str}':\n\n"
              )
              
              if matching_facts:
                  output += f"## Facts ({len(matching_facts)}):\n"
                  for i, fact in enumerate(matching_facts, 1):
                      output += f"{i}. {fact.get('statement')}\n"
                  output += "\n"
              
              if matching_concepts:
                  output += f"## Concepts ({len(matching_concepts)}):\n"
                  for i, concept in enumerate(matching_concepts, 1):
                      name = concept.get('name')
                      desc = concept.get('description', '')
                      output += f"{i}. {name}: {desc}\n"
              
              if not matching_facts and not matching_concepts:
                  output += "No matching facts or concepts found."
              
              return {"output": output, "messages": output_msgs}
              
          except Exception as e:
              return {
                  "output": f"Error searching KG: {e}", 
                  "messages": output_msgs
              }

      def search_web_default(query_str, current_context, output_msgs):
          try:
              from npcpy.data.web import search_web
          except ImportError:
              return {
                  "output": "Web search unavailable: npcpy.data.web not found",
                  "messages": output_msgs
              }

          current_search_provider = current_context.get('sprovider')
          if not current_search_provider:
              current_search_provider = "duckduckgo"

          try:
              search_results = search_web(
                  query_str, 
                  provider=current_search_provider
              )
              output = (
                  "\n".join([f"- {res}" for res in search_results]) 
                  if search_results 
                  else "No results found."
              )
          except Exception as e:
              output = f"Error during web search: {e}"
          
          return {"output": output, "messages": output_msgs}

      npc_obj = current_npc
      context['npc_name'] = (
          npc_obj.name 
          if npc_obj and hasattr(npc_obj, 'name') 
          else "__none__"
      )
      context['team_name'] = (
          current_team.name 
          if current_team 
          else "__none__"
      )
      context['current_path'] = os.getcwd()

      final_result = None
      if search_type == 'memory':
          final_result = search_memories(query, context, output_messages)
      elif search_type == 'kg':
          final_result = search_knowledge_graph(
              query, 
              context, 
              output_messages
          )
      else:
          final_result = search_web_default(
              query, 
              context, 
              output_messages
          )

      context['output'] = final_result.get('output')
      context['messages'] = final_result.get('messages', output_messages)