jinx_name: "vixynt"
description: "Generates images from text descriptions or edits existing ones."
inputs:
  - prompt
  - model: ""
  - provider: ""
  - output_name: ""
  - attachments: ""
  - n_images: 1
  - height: 1024
  - width: 1024
steps:
  - name: "generate_or_edit_image"
    engine: "python"
    code: |
      import os
      import base64
      from io import BytesIO
      from datetime import datetime
      from PIL import Image
      from npcpy.llm_funcs import gen_image
      
      # Extract inputs from context
      image_prompt = context.get('prompt', '').strip()
      output_name = context.get('output_name')
      attachments_str = context.get('attachments')
      n_images = int(context.get('n_images', 1))
      height = int(context.get('height', 1024))
      width = int(context.get('width', 1024))
      model = context.get('model')
      provider = context.get('provider')

      input_images = []
      if attachments_str and attachments_str.strip():
          input_images = [p.strip() for p in attachments_str.split(',')]

      # Use NPC's model/provider as fallback
      if not model and npc and npc.model:
          model = npc.model 
      if not provider and npc and npc.provider:
          provider = npc.provider
      
      # Final fallbacks
      if not model:
          model = "runwayml/stable-diffusion-v1-5"
      if not provider:
          provider = "diffusers"
      
      output_messages = context.get('messages', [])
      
      if not image_prompt:
          context['output'] = "Error: No prompt provided for image generation."
          context['messages'] = output_messages
          exit()
      
      try:
          # Generate image(s)
          result = gen_image(
              prompt=image_prompt,
              model=model,
              provider=provider,
              npc=npc,
              height=height,
              width=width,
              n_images=n_images, 
              input_images=input_images if input_images else None
          )
          
          # Ensure we have a list of images
          if not isinstance(result, list):
              images_list = [result] if result is not None else []
          else:
              images_list = result
          
          saved_files = []
          
          for i, image in enumerate(images_list):
              if image is None:
                  continue
              
              # Determine output filename
              if output_name and output_name.strip():
                  base_name, ext = os.path.splitext(os.path.expanduser(output_name))
                  if not ext:
                      ext = ".png"
                  current_output_file = f"{base_name}_{i}{ext}" if len(images_list) > 1 else f"{base_name}{ext}"
              else:
                  os.makedirs(os.path.expanduser("~/.npcsh/images/"), exist_ok=True)
                  current_output_file = (
                      os.path.expanduser("~/.npcsh/images/")
                      + f"image_{datetime.now().strftime('%Y%m%d_%H%M%S')}_{i}.png"
                  )
              
              # Save image to file
              image.save(current_output_file)
              saved_files.append(current_output_file)
          
          if saved_files:
              if input_images:
                  output = f"Image(s) edited and saved to: {', '.join(saved_files)}"
              else:
                  output = f"Image(s) generated and saved to: {', '.join(saved_files)}"
              
              # DO NOT include base64 data - just reference the file paths
              output += f"\n\nThe image files have been saved and are ready to view."
          else:
              output = "No images were generated."
              
      except Exception as e:
          import traceback
          traceback.print_exc()
          output = f"Error {'editing' if input_images else 'generating'} image: {str(e)}"
      
      context['output'] = output
      context['messages'] = output_messages
      context['model'] = model
      context['provider'] = provider